import { useState } from "react";
import { GenerateSignature } from "../utils/utils";
import axios from "axios";
import backArrow from "../assets/back-arrow-svgrepo-com.svg";

const TestFlows = () => {
  const [merchantID, setMerchantID] = useState("BUGBOUNTY231");
  const [merchantSecretKey, setMerchantSecretKey] = useState(import.meta.env.VITE_MERCHANT_SECRET_KEY);
  const baseURL = "http://localhost:8080";
  const clientFlowEndpointURL = "/api/v1/deposit/client-flow/";
  const backendFlowEndpointURL = "/api/v1/deposit/backend-flow/";
  const orderStatusReqEndpointURL = "/api/v1/query/order-status/";
  const [endpointID, setEndpointID] = useState("402334");
  const [depositReqPayload, setDepositReqPayload] = useState({
    merchantOrderID: "QvE8dZshpKhaOmH7",
    merchantOrderDesc: "Test order",
    orderAmount: "500",
    orderCurrency: "USD",
    customerEmail: "customer@email-address.com",
    customerFirstName: "John",
    customerLastName: "Doe",
    customerAddress: "5/5 Moo 5 Thong Nai Pan Noi Beach, Baan Tai, Koh Phangan",
    customerCountryCode: "TH",
    customerCity: "Surat Thani",
    customerState: "NY",
    customerZipCode: "84280",
    customerPhone: "+66-77999110",
    customerIP: "103.106.8.104",
    customerBankCode: "ABC",
    customerBankAccountNumber: "100200",
    redirectUrl: import.meta.env.VITE_REDIRECT_URL || "http://localhost:5173/v1/payment/return",
    callbackUrl: import.meta.env.VITE_CALLBACK_URL || "http://localhost:8080/api/v1/payment-callback/",
    customParam: '{"UserId": "e139b447"}',
    checkoutUrl: import.meta.env.VITE_REDIRECT_URL.replace("/v1/payment/return", "/v1/account/deposit/:uid") || "http://localhost:3000/v1/account/deposit/:uid",
    // deposit request signature will be generated by the backend
  });
  // responses
  const [message, setMessage] = useState("");
  const [orderStatusResp, setOrderStatusResp] = useState({
    type: "",
    status: "",
    errorMessage: "",
    endpointID: "",
    processorTransactionID: "",
    merchantOrderID: "",
    orderID: "",
    amount: "",
    currency: "",
    customerEmail: "",
    customParam: "",
    extraData: {
      amountChanged: "",
      amountRounded: "",
      amountManipulated: "",
      dcc: "",
      originalAmount: "",
      paymentMethod: "",
      selectedBankCode: "",
      selectedBankName: "",
    },
  });

  const handleInputChange = (e) => {
    setDepositReqPayload((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  // init a client flow with redirects
  const handleClientFlowWithRedirects = async () => {
    try {
      // call the deposit request endpoint
      const data = await axios.post(`${baseURL}${clientFlowEndpointURL}${endpointID}/`, depositReqPayload);

      // order status request happens in redirectURL (PaymentReturn.jsx)
      // frontend will poll requests and display/update results until a final status is received.
      const merchantOrderID = data.data.merchantOrderID;
      const orderID = data.data.orderID;
      const timestamp = Math.floor(Date.now() / 1000);
      // generate auth signature for order status request
      const orderStatusSignature = GenerateSignature(`${merchantID}${merchantOrderID}${orderID}${timestamp}${merchantSecretKey}`);
      // prepare query paramaters for the order status request
      localStorage.setItem("merchantID", merchantID);
      localStorage.setItem("merchantOrderID", merchantOrderID);
      localStorage.setItem("orderID", orderID);
      localStorage.setItem("timestamp", timestamp);
      localStorage.setItem("signature", orderStatusSignature);
      // pass base url and order status request endpoint to the redirect url
      localStorage.setItem("baseURL", baseURL);
      localStorage.setItem("orderStatusReqEndpointURL", orderStatusReqEndpointURL);
      // redirect to zota deposit url to submit the payment (zota will then redirect to the redirectUrl)
      window.location.href = data.data.depositUrl;
    } catch (error) {
      if (error.response) {
        // server responded with a status other than 2xx
        console.error("Error response:", error.response.data);
        setMessage(error.response.data.message);
      } else {
        // something else happened while setting up the request
        console.error("Error:", error.message);
        setMessage(`Error: ${error.message}`);
      }
    }
  };

  // test backend flow endpoint which will issue a deposit request,
  // backend will poll the order status until a final status is received, and return the response to the client whicl will update the UI
  const handleBackendFlowWithoutRedirects = async () => {
    try {
      const data = await axios.post(`${baseURL}${backendFlowEndpointURL}${endpointID}/`, depositReqPayload);

      setOrderStatusResp(data.data);
    } catch (error) {
      if (error.response) {
        // server responded with a status other than 2xx
        console.error("Error response:", error.response.data);
        setMessage(error.response.data.message);
      } else {
        // something else happened while setting up the request
        console.error("Error:", error.message);
        setMessage(`Error: ${error.message}`);
      }
    }
  };

  return (
    <div className="flows-container mx-auto p-4">
      <div className="flex justify-between items-center pb-5">
        <button onClick={() => (window.location.href = "/")}>
          <img src={backArrow} alt="back arrow" className="w-8 h-8" />
        </button>
        <h1 className="text-2xl font-bold mb-4">Test Flows</h1>
        <div className="flex space-x-10">
          <div className="flex flex-col">
            <label className="font-medium">EndpointID</label>
            <input type="text" value={endpointID} onChange={(e) => setEndpointID(e.target.value)} className="p-2 border rounded-md" />
          </div>
          <div className="flex flex-col">
            <label className="font-medium">Merchant ID</label>
            <input type="text" value={merchantID} onChange={(e) => setMerchantID(e.target.value)} className="p-2 border rounded-md" />
          </div>
          <div className="flex flex-col">
            <label className="font-medium">Merchant Secret Key</label>
            <input type="text" value={merchantSecretKey} onChange={(e) => setMerchantSecretKey(e.target.value)} className="p-2 border rounded-md" />
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-4 border rounded-md shadow-md">
          <h2 className="text-xl font-semibold mb-2">Client Flow with Redirects</h2>
          <p className="mb-4">The user will be redirected to the deposit URL and then further to the redirect URL where the order status will be polled on the frontend until a final status is received.</p>
          <div className="flex flex-col gap-2 mb-4">
            {Object.keys(depositReqPayload).map((key) => (
              <div key={key} className="flex flex-col">
                <label className="font-medium">{key}</label>
                <input type="text" name={key} value={depositReqPayload[key]} onChange={handleInputChange} className="p-2 border rounded-md" />
              </div>
            ))}
          </div>
          <button onClick={handleClientFlowWithRedirects} className="bg-blue-500 text-white py-2 px-4 rounded-md">
            Start Client Flow
          </button>
        </div>
        <div className="p-4 border rounded-md shadow-md">
          <h2 className="text-xl font-semibold mb-2">Backend Flow with final order status response displayed below</h2>
          <p className="mb-4">The user will not be redirected. The process will happen entirely on the backend by issuing a deposit request and polling the order status until a final status is received, then returning the response and displaying it below.</p>
          <div className="flex flex-col gap-2 mb-4">
            {Object.keys(depositReqPayload).map((key) => (
              <div key={key} className="flex flex-col">
                <label className="font-medium">{key}</label>
                <input type="text" name={key} value={depositReqPayload[key]} onChange={handleInputChange} className="p-2 border rounded-md" />
              </div>
            ))}
          </div>
          <button onClick={handleBackendFlowWithoutRedirects} className="bg-blue-500 text-white py-2 px-4 rounded-md">
            Start Backend Flow
          </button>
        </div>
      </div>
      {message && (
        <div className="mt-4 p-4 border rounded-md shadow-md">
          <h2 className="text-xl font-semibold">Message</h2>
          <p>{message}</p>
        </div>
      )}
      {orderStatusResp && (
        <div className="mt-4 p-4 border rounded-md shadow-md">
          <h2 className="text-xl font-semibold">Final Order Status Response</h2>
          <pre>
            <code>{JSON.stringify(orderStatusResp, null, 2)}</code>
          </pre>
        </div>
      )}
    </div>
  );
};

export default TestFlows;

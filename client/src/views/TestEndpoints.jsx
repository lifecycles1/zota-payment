import { useState } from "react";
import { GenerateSignature } from "../utils/utils";
import axios from "axios";
import backArrow from "../assets/back-arrow-svgrepo-com.svg";

const TestEndpoints = () => {
  const [merchantID, setMerchantID] = useState("BUGBOUNTY231");
  const [merchantSecretKey, setMerchantSecretKey] = useState(import.meta.env.VITE_MERCHANT_SECRET_KEY);
  const baseURL = "http://localhost:8080";
  const depositReqEndpointURL = "/api/v1/deposit/request/";
  const orderStatusReqEndpointURL = "/api/v1/query/order-status/";
  //state for deposit request
  const [endpointID, setEndpointID] = useState("402334");
  const [depositReqPayload, setDepositReqPayload] = useState({
    merchantOrderID: "QvE8dZshpKhaOmH38",
    merchantOrderDesc: "Test order",
    orderAmount: "500",
    orderCurrency: "USD",
    customerEmail: "customer@email-address.com",
    customerFirstName: "John",
    customerLastName: "Doe",
    customerAddress: "5/5 Moo 5 Thong Nai Pan Noi Beach, Baan Tai, Koh Phangan",
    customerCountryCode: "TH",
    customerCity: "Surat Thani",
    customerState: "NY",
    customerZipCode: "84280",
    customerPhone: "+66-77999110",
    customerIP: "103.106.8.104",
    customerBankCode: "ABC",
    customerBankAccountNumber: "100200",
    redirectUrl: import.meta.env.VITE_REDIRECT_URL || "http://localhost:5173/v1/payment/return",
    callbackUrl: import.meta.env.VITE_CALLBACK_URL || "http://localhost:8080/api/v1/payment-callback/",
    customParam: '{"UserId": "e139b447"}',
    checkoutUrl: import.meta.env.VITE_REDIRECT_URL.replace("/v1/payment/return", "/v1/account/deposit/:uid") || "http://localhost:3000/v1/account/deposit/:uid",
    // deposit request signature will be generated by the backend
  });
  // state for deposit response
  const [depositReqResp, setDepositReqResp] = useState({
    depositUrl: "",
    merchantOrderID: "",
    orderID: "",
  });
  // state for order status request
  const [orderStatusReq, setOrderStatusReq] = useState({
    merchantID: "",
    merchantOrderID: "",
    orderID: "",
    timestamp: "",
    signature: "",
  });
  // state for order status response
  const [orderStatusResp, setOrderStatusResp] = useState({
    type: "",
    status: "",
    errorMessage: "",
    endpointID: "",
    processorTransactionID: "",
    merchantOrderID: "",
    orderID: "",
    amount: "",
    currency: "",
    customerEmail: "",
    customParam: "",
    extraData: {
      amountChanged: "",
      amountRounded: "",
      amountManipulated: "",
      dcc: "",
      originalAmount: "",
      paymentMethod: "",
      selectedBankCode: "",
      selectedBankName: "",
    },
  });
  // state for messages
  const [messages, setMessages] = useState({
    depositMessage: "",
    orderStatusMessage: "",
    timestampAndSignatureMessage: "",
  });

  // test a single deposit request
  const handleDepositRequest = async () => {
    try {
      const response = await axios.post(`${baseURL}${depositReqEndpointURL}${endpointID}/`, depositReqPayload);
      setDepositReqResp(response.data.data);
      setOrderStatusReq((prev) => ({ ...prev, merchantID, merchantOrderID: response.data.data.merchantOrderID, orderID: response.data.data.orderID }));
      setMessages((prev) => ({ ...prev, depositMessage: "" }));
    } catch (error) {
      if (error.response) {
        // server responded with a status other than 2xx
        console.error("Error response:", error.response.data);
        setMessages((prev) => ({ ...prev, depositMessage: error.response.data.message }));
      } else {
        // something else happened while setting up the request
        console.error("Error:", error.message);
        setMessages((prev) => ({ ...prev, depositMessage: `Error: ${error.message}` }));
      }
    }
  };

  // test a single order status request
  const handleOrderStatusRequest = async () => {
    if (!orderStatusReq.merchantOrderID || !orderStatusReq.orderID) {
      setMessages((prev) => ({ ...prev, orderStatusMessage: "Please create a deposit request first." }));
      return;
    }

    if (!orderStatusReq.timestamp || !orderStatusReq.signature) {
      setMessages((prev) => ({ ...prev, orderStatusMessage: "Please generate a timestamp and auth signature first." }));
      return;
    }

    try {
      console.log("Running order status request...");
      const queryString = new URLSearchParams({
        merchantID: orderStatusReq.merchantID,
        merchantOrderID: orderStatusReq.merchantOrderID,
        orderID: orderStatusReq.orderID,
        timestamp: orderStatusReq.timestamp,
        signature: orderStatusReq.signature,
      }).toString();
      const resp = await axios.get(`${baseURL}${orderStatusReqEndpointURL}?${queryString}`);

      setOrderStatusResp(resp.data.data);
      setMessages((prev) => ({ ...prev, orderStatusMessage: "" }));
    } catch (error) {
      if (error.response) {
        // server responded with a status other than 2xx
        console.error("Error response:", error.response.data);
        setMessages((prev) => ({ ...prev, orderStatusMessage: error.response.data.message }));
      } else {
        // something else happened while setting up the request
        console.error("Error:", error.message);
        setMessages((prev) => ({ ...prev, orderStatusMessage: `Error: ${error.message}` }));
      }
    }
  };

  const handleInputChange = (e) => {
    setDepositReqPayload((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const generateTimestampAndAuthSignature = async () => {
    if (!orderStatusReq.merchantOrderID || !orderStatusReq.orderID) {
      setMessages((prev) => ({ ...prev, timestampAndSignatureMessage: "Please create a deposit request first." }));
      return;
    }
    const timestamp = Math.floor(Date.now() / 1000);
    const signature = await GenerateSignature(`${merchantID}${orderStatusReq.merchantOrderID}${orderStatusReq.orderID}${timestamp}${merchantSecretKey}`);
    setOrderStatusReq((prev) => ({ ...prev, timestamp, signature }));
    setMessages((prev) => ({ ...prev, timestampAndSignatureMessage: "" }));
  };

  return (
    <div className="endpoints-container mx-auto p-4">
      <div className="flex justify-between items-center pb-5">
        <button onClick={() => (window.location.href = "/")}>
          <img src={backArrow} alt="back arrow" className="w-8 h-8" />
        </button>
        <h1 className="text-2xl font-bold mb-4">Test Endpoints</h1>
        <div className="flex space-x-10">
          <div className="flex flex-col">
            <label className="font-medium">MerchantID</label>
            <input type="text" value={merchantID} onChange={(e) => setMerchantID(e.target.value)} className="p-2 border rounded-md" />
          </div>
          <div className="flex flex-col">
            <label className="font-medium">Merchant Secret Key</label>
            <input type="text" value={merchantSecretKey} onChange={(e) => setMerchantSecretKey(e.target.value)} className="p-2 border rounded-md" />
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-4 border rounded-md shadow-md">
          <div className="flex flex-col md:flex-row md:justify-between items-center">
            <h2 className="text-xl font-semibold mb-2">Deposit Request</h2>
            <code className="bg-gray-200">{depositReqEndpointURL}</code>
          </div>
          <div className="flex flex-col md:flex-row md:justify-between items-center">
            <p className="mb-4">Create a deposit request.</p>
            <div className="flex flex-col">
              <label className="font-medium">EndointID</label>
              <input type="text" value={endpointID} onChange={(e) => setEndpointID(e.target.value)} className="p-2 border rounded-md" />
            </div>
          </div>
          <div className="flex flex-col gap-2 mb-4">
            {Object.keys(depositReqPayload).map((key) => (
              <div key={key} className="flex flex-col">
                <label className="font-medium">{key}</label>
                <input type="text" name={key} value={depositReqPayload[key]} onChange={handleInputChange} className="p-2 border rounded-md" />
              </div>
            ))}
          </div>
          <button onClick={handleDepositRequest} className="bg-blue-500 text-white py-2 px-4 rounded-md">
            Deposit Request
          </button>
          {messages.depositMessage && <p className="text-red-500">{messages.depositMessage}</p>}
          {depositReqResp && (
            <div className="mt-4 p-4 border rounded-md shadow-md overflow-x-auto">
              <h2 className="text-xl font-semibold">Deposit Request Response</h2>
              <pre>
                <code>{JSON.stringify(depositReqResp, null, 2)}</code>
              </pre>
            </div>
          )}
        </div>
        <div className="p-4 border rounded-md shadow-md">
          <div className="flex flex-col md:flex-row md:justify-between items-center">
            <h2 className="text-xl font-semibold mb-2">Order Status Request</h2>
            <code className="bg-gray-200">{orderStatusReqEndpointURL}</code>
          </div>
          <p className="mb-4">Check the status of the deposit request.</p>
          <div className="flex flex-col gap-2 mb-4">
            <div className="flex flex-col">
              <label className="font-medium">MerchantID</label>
              <input type="text" value={orderStatusReq.merchantID} readOnly className="p-2 border rounded-md" />
            </div>
            <div className="flex flex-col">
              <label className="font-medium">Merchant Order ID</label>
              <input type="text" value={orderStatusReq.merchantOrderID} readOnly className="p-2 border rounded-md" />
            </div>
            <div className="flex flex-col">
              <label className="font-medium">Order ID</label>
              <input type="text" value={orderStatusReq.orderID} readOnly className="p-2 border rounded-md" />
            </div>
            <div className="flex flex-col">
              <button onClick={generateTimestampAndAuthSignature} className="bg-blue-500 text-white py-2 px-4 rounded-md">
                Generate Timestamp and Auth Signature
              </button>
              {messages.timestampAndSignatureMessage && <p className="text-red-500">{messages.timestampAndSignatureMessage}</p>}
              <label className="font-medium">Timestamp</label>
              <input type="text" value={orderStatusReq.timestamp} readOnly className="p-2 border rounded-md" />
            </div>
            <div className="flex flex-col">
              <label className="font-medium">Signature</label>
              <input type="text" value={orderStatusReq.signature} readOnly className="p-2 border rounded-md" />
            </div>
          </div>
          <div className="flex flex-col">
            <button onClick={handleOrderStatusRequest} className="bg-blue-500 text-white py-2 px-4 rounded-md">
              Order Status Request
            </button>
            {messages.orderStatusMessage && <p className="text-red-500">{messages.orderStatusMessage}</p>}
          </div>
          {orderStatusResp && (
            <div className="mt-4 p-4 border rounded-md shadow-md">
              <h2 className="text-xl font-semibold">Order Status Response</h2>
              <pre>
                <code>{JSON.stringify(orderStatusResp, null, 2)}</code>
              </pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TestEndpoints;

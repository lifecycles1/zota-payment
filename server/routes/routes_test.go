package routes

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"
	"time"
	"zota_payment/dto"
	"zota_payment/utils"

	"github.com/joho/godotenv"
	"github.com/stretchr/testify/assert"
)

const baseURL = "http://localhost:8080"

func TestDepositRequestAndOrderStatusEndpoints(t *testing.T) {
	err := godotenv.Load("../.env")
	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	client := &http.Client{Timeout: 10 * time.Second}

	// make a request to the deposit request endpoint
	endpointID := os.Getenv("ENDPOINT_ID")
	if endpointID == "" {
		t.Fatalf("ENDPOINT_ID environment variable is not set")
	}

	// generate unique random merchantOrderID
	merchantOrderID := fmt.Sprintf("testOrderID-%d", time.Now().UnixNano())

	payload := dto.DepositRequest{
		MerchantOrderID:           merchantOrderID,
		MerchantOrderDesc:         "Test order",
		OrderAmount:               "500",
		OrderCurrency:             "USD",
		CustomerEmail:             "customer@email.com",
		CustomerFirstName:         "John",
		CustomerLastName:          "Doe",
		CustomerAddress:           "123 Main St",
		CustomerCountryCode:       "US",
		CustomerCity:              "New York",
		CustomerState:             "NY",
		CustomerZipCode:           "10001",
		CustomerPhone:             "+1234567890",
		CustomerIP:                "192.168.1.1",
		CustomerBankCode:          "XYZ",
		CustomerBankAccountNumber: "123456789",
		RedirectURL:               "http://localhost:5173/v1/payment/return",
		CallbackURL:               "http://localhost:8080/api/v1/payment-callback/",
		CustomParam:               `{"UserId": "testUserId"}`,
		CheckoutURL:               "http://localhost:3000/v1/account/deposit/:uid",
		// signature will be generated by the service
	}

	// Serialize payload to JSON
	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		t.Fatalf("Failed to serialize payload: %v", err)
	}

	req, err := http.NewRequest("POST", fmt.Sprintf("%s/api/v1/deposit/request/%s/", baseURL, endpointID), bytes.NewBuffer(payloadBytes))
	if err != nil {
		t.Fatalf("Failed to create request: %v", err)
	}

	// Set content type to JSON
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		t.Fatalf("Failed to send request: %v", err)
	}
	defer resp.Body.Close()

	// Parse the response body
	var depositResponse dto.DepositResponse
	if err := json.NewDecoder(resp.Body).Decode(&depositResponse); err != nil {
		t.Fatalf("Failed to decode response body: %v", err)
	}

	t.Logf("Deposit Request Response: %+v", depositResponse)

	// Validate the response
	assert.Equal(t, http.StatusOK, resp.StatusCode)
	assert.Contains(t, depositResponse.Data.DepositURL, "https://secure.zotapay-stage.com/api/v1/deposit/init/")

	// make a request to the order status endpoint
	merchantID := os.Getenv("MERCHANT_ID")
	if merchantID == "" {
		t.Fatalf("MERCHANT_ID environment variable is not set")
	}

	timestamp := fmt.Sprintf("%d", time.Now().Unix())

	signatureString := fmt.Sprintf("%s%s%s%s%s",
		merchantID, depositResponse.Data.MerchantOrderID, depositResponse.Data.OrderID, timestamp, os.Getenv("MERCHANT_SECRET_KEY"))
	signature := utils.GenerateSignature(signatureString)

	queryString := fmt.Sprintf("merchantID=%s&merchantOrderID=%s&orderID=%s&timestamp=%s&signature=%s",
		merchantID, depositResponse.Data.MerchantOrderID, depositResponse.Data.OrderID, timestamp, signature)

	req, err = http.NewRequest("GET", fmt.Sprintf("%s/api/v1/query/order-status/?%s", baseURL, queryString), nil)
	if err != nil {
		t.Fatalf("Failed to create request: %v", err)
	}

	resp, err = client.Do(req)
	if err != nil {
		t.Fatalf("Failed to send request: %v", err)
	}

	// Parse the response body
	var orderStatusResponse dto.OrderStatusResponse
	if err := json.NewDecoder(resp.Body).Decode(&orderStatusResponse); err != nil {
		t.Fatalf("Failed to decode response body: %v", err)
	}

	t.Logf("Order Status Response: %+v", orderStatusResponse)

	// Validate the response
	assert.Equal(t, http.StatusOK, resp.StatusCode)
}
